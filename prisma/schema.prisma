// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("update_at")

  email String @unique 
  password String?
  name String @default("не Указанно")
  picture String @default("/uploads/no-user-images.png")

  store Store[]

  favorite Product[]

  review Review[]

  order Order[]

  @@map("user")
}

model Store {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("update_at")

  title String 
  description String?

  product Product[]

  category Category[]

  review Review[]

  color Color[]

  orderItem OrderItem[]

  user User? @relation(fields: [userId],references: [id])
  userId String? @map("user_id")

  @@map("store")
  
}

model Product {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("update_at")

  title String 
  description String?
  price Int
  images String[]

  review Review[]

  orderItem OrderItem[]

  store Store? @relation(fields: [storeId],references: [id])
  storeId String? @map("store_id")

  category Category? @relation(fields: [categoryId],references: [id])
  categoryId String? @map("category_id")//у продукт одна категори 

  color Color? @relation(fields: [colorId],references: [id])
  colorId String? @map("color_id")

  user User? @relation(fields: [userId],references: [id])
  userId String? @map("user_id")

  @@map("product")
  
  
}

model Category {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("update_at")

  title String 
  description String
  price Int

  product Product[]//у категории несколко продукт 

  store Store? @relation(fields: [storeId],references: [id])
  storeId String? @map("store_id")

  @@map("category")
}

model Color {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("update_at")

  name String 
  value String

  product Product[]//у категории несколко продукт 

  store Store? @relation(fields: [storeId],references: [id])
  storeId String? @map("store_id")

  @@map("color")
}

model Review {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("update_at")

  text String 
  raiting Int

  user User? @relation(fields: [userId],references: [id])
  userId String? @map("user_id")

  product Product? @relation(fields: [productId],references: [id])
  productId String? @map("product_id")

  store Store? @relation(fields: [storeId],references: [id])
  storeId String? @map("store_id")

  @@map("review")
}

model Order {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("update_at")

  status EnumOrderStatus @default(PENDING)

  items OrderItem[]

  total Int

  user User? @relation(fields: [userId],references: [id])
  userId String? @map("user_id")

  @@map("order")
}

model OrderItem {
  id String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("update_at")

  quantity Int
  price Int 

  store Store? @relation(fields: [storeId],references: [id])
  storeId String? @map("store_id")

  order Order? @relation(fields: [orderId],references: [id])
  orderId String? @map("order_id")

  product Product? @relation(fields: [productId],references: [id])
  productId String? @map("product_id")



  @@map("orderitem")
}



enum EnumOrderStatus{
  PENDING
  PAYED
}